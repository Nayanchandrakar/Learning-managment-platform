// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model requests {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  userId      String  @unique
  isApproved  Boolean @default(false)
  description String
}

model Course {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String        @unique
  description Json?
  price       Int?
  imageUrl    String?
  isPublish   Boolean       @default(false)
  category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  String?       @db.ObjectId
  attachments Attachments[]
  chapters    Chapters[]    @relation("course_chapters")
  purchases   Purchase[]
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  courses Course[]
}

model Attachments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  url       String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapters {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  position    Int
  videoUrl    String?

  userProgress UserProgress[]

  muxData MuxData?

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], name: "course_chapters", onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProgress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isCompleted Boolean @default(false)

  chapterId String   @unique @db.ObjectId
  chapter   Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  chapterId String   @unique @db.ObjectId
  chapter   Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
